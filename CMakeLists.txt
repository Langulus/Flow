cmake_minimum_required(VERSION 3.22)
project(Langulus.Flow)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Check if this project is built as standalone, or a part of something else 
if (PROJECT_IS_TOP_LEVEL)
    if(LANGULUS_BUILD_SHARED_LIBRARIES)
        add_compile_definitions(LANGULUS_EXPORT_ALL)
        set(LANGULUS_LIBRARY_TYPE SHARED)
    else()
        set(LANGULUS_LIBRARY_TYPE STATIC)
    endif()

    find_package(Git REQUIRED)
    execute_process(
        COMMAND ${GIT_EXECUTABLE} submodule update --init -- cmake 
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        COMMAND_ERROR_IS_FATAL ANY
    )
    list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
    include(FetchLangulusModule)
    include(HandleLangulusFeatures)

    handle_langulus_features()

	fetch_langulus_module(Core)
	fetch_langulus_module(Logger)
	fetch_langulus_module(RTTI)
	fetch_langulus_module(Anyness)

    add_compile_definitions(LANGULUS_ENABLE_TESTING)
    enable_testing()
	add_subdirectory(test)
endif()

# Build and install Flow library                                            
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/source SOURCE_FILES)
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/source/verbs SOURCE_FILES)
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/source/inner SOURCE_FILES)
add_library(Langulus.Flow ${LANGULUS_LIBRARY_TYPE} ${SOURCE_FILES})

target_include_directories(Langulus.Flow PUBLIC include)
target_link_libraries(Langulus.Flow PUBLIC Langulus.Anyness)
